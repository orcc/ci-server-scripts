#!/bin/bash

NBARGS=3
function print_usage() {
    echo
    echo "Usage: $0 <working_directory> <feature_dir> <plugin_dir> [<plugin_dir>, <plugin_dir>, ...]"
    echo "    <working_directory>           Path to folder used to perform build & tests"
    echo "    <feature_dir>                 Path to eclipse feature folder"
    echo "    <plugin_dir>                  Path(s) to folder(s) containing eclipse plugins directories"
}

source $(dirname $0)/defines.sh

if [ $# -lt $NBARGS ]; then
    print_usage
    exit $E_BADARGS
fi

[ ! -d "$2" ] && echo "Missing features directory" && print_usage && exit $E_BADARGS
[ ! -d "$3" ] && echo "Missing plugins directory" && print_usage && exit $E_BADARGS

SOURCEFEATUREDIR=$2

ORCCID="net.sf.orcc"

echo "***START*** $(date -R) Build type: $BUILDTYPE"
rm -fr $BUILDDIR
mkdir -p $PLUGINSDIR
mkdir -p $FEATURESDIR/${ORCCID}

cp -ur $SOURCEFEATUREDIR/* $FEATURESDIR/${ORCCID}

# Remove the 2 first arg from command line
shift 2
# Loop over resulting cli arguments
for arg; do
    cp -ur $arg/* $PLUGINSDIR
done

echo ""
echo "****************************************************************"
echo "*             Generates Cal Xtext architecture                 *"
echo "****************************************************************"
echo ""
cd $PLUGINSDIR/net.sf.orcc.cal
java -cp $MWECP org.eclipse.emf.mwe2.launch.runtime.Mwe2Launcher src/net/sf/orcc/cal/GenerateCal.mwe2

echo ""
echo "****************************************************************"
echo "*             Generates Java sources from Xtend                *"
echo "****************************************************************"
echo ""
already_compiled=""
for plugin in $(ls $PLUGINSDIR); do
    # Execute Xtend compile only if plugin contains *.xtend files
    if [ -n "$(find $PLUGINSDIR/$plugin -name "*.xtend" -print0)" ]; then
        echo "==> Plugin: $PLUGINSDIR/$plugin"
        # Yes, I know, -cp parameter is set twice with the same value. Don't ask me
        # why... Removing one of these parameters will break the Xtend generation step...
        java -cp $XTENDCP org.eclipse.xtend.core.compiler.batch.Main \
             -cp $XTENDCP \
             -d $PLUGINSDIR/$plugin/xtend-gen \
             $already_compiled$PLUGINSDIR/$plugin/src

        # Last plugins compiled needs to have the base class already compiled in
        # the list of source folder. Note that works fine only because we are lucky:
        # alphabetical order of Orcc plugins is coherent with dependency order in Xtend files.
        if [ -d $PLUGINSDIR/$plugin/xtend-gen ]; then
            already_compiled=$PLUGINSDIR/$plugin/xtend-gen:$already_compiled
        fi
        printf "\n"
    fi
done

echo ""
echo "****************************************************************"
echo "*                    Launches PDE Build                        *"
echo "****************************************************************"
echo ""

# Define PDE build specific variables
LAUNCHERJAR=$(echo $ECLIPSEBUILD/plugins/org.eclipse.equinox.launcher_*.jar)
BUILDFILE=$(echo $ECLIPSEBUILD/plugins/org.eclipse.pde.build_*)/scripts/build.xml
KEEPONLYLATESTVERSIONS=true # Set to false when a Release build will be defined

if [ "$BUILDTYPE" == "tests" ]; then
    PDEBUILDTYPE=I
    REPONAME="Orcc Tests repository"
    NDAYSTOKEEP=1
elif [ "$BUILDTYPE" == "nightly" ]; then
    PDEBUILDTYPE=N
    REPONAME="Orcc Nightly builds"
    NDAYSTOKEEP=45
else
    # Release build (not active yet)
    PDEBUILDTYPE=R
    REPONAME="Orcc - Open RVC-CAL Compiler Releases"
    NDAYSTOKEEP=999999
fi

mkdir -p $BUILDDIR

# This will be used as default name for the top level folder of
# build features and plugins. Needs to rename it
ARCHIVEPREFIX=orcc_latest

BUILDID="${BUILDTYPE}Build"

# For information on following properties:
# - open build.properties from <eclipse_dir>/plugins/org.eclipse.pde.build_*/templates/headless-build/build.properties
# - http://help.eclipse.org/kepler/index.jsp?topic=%2Forg.eclipse.pde.doc.user%2Ftasks%2Fpde_feature_build.htm&cp=4_2_0_1
$ECLIPSEBUILD/eclipse   -nosplash -consoleLog -application org.eclipse.ant.core.antRunner \
                        -buildfile $BUILDFILE \
                        -DskipFetch=true \
                        -DtopLevelElementId=$ORCCID \
                        -DtopLevelElementType=feature \
                        -DjavacSource=1.6 -DjavacTarget=1.6 \
                        -DbaseLocation=$ECLIPSEBUILD \
                        -DpluginPath=$ECLIPSEBUILD:$BUILDDIR \
                        -DbuildDirectory=$BUILDDIR \
                        -Dbase=$BUILDDIR \
                        -DbuildId=$BUILDID \
                        -DbuildType=$PDEBUILDTYPE \
                        -DbuildLabel="${buildId}.${buildType}" \
                        -DarchivePrefix=$ARCHIVEPREFIX \
                        -DcollectingFolder=binary_output \
                        -DoutputUpdateJars=true

echo ""
echo "****************************************************************"
echo "*                  Builds the p2 repository                    *"
echo "****************************************************************"

LOCALREPO=$ORCCWORK/repository.$BUILDTYPE
mkdir -p $LOCALREPO
mv $BUILDDIR/$ORCCID-$BUILDID.zip $LOCALREPO

# Load version number computed from the build
VERSION=`cat $BUILDDIR/finalFeaturesVersions.properties | grep "${ORCCID}=" | cut -d'=' -f2`
CURRENTBUILD="${ORCCID}_${VERSION}"

pushd $LOCALREPO > /dev/null
echo ""
echo "-> Extract built zip file"
# Unzip the built zip, the created folder is $ARCHIVEPREFIX
unzip -o $ORCCID-$BUILDID.zip
# Clean the useless zip
rm $ORCCID-$BUILDID.zip

echo ""
echo "-> Rename $ARCHIVEPREFIX into $CURRENTBUILD"
# Rename it to its final name
mv $ARCHIVEPREFIX $CURRENTBUILD

# Initialize a p2 repository in the extracted folder
echo ""
echo "-> Transform $CURRENTBUILD into a standard p2 repository"

$P2ADMIN -application org.eclipse.equinox.p2.publisher.FeaturesAndBundlesPublisher \
  -metadataRepository file:$(pwd)/${CURRENTBUILD} \
  -artifactRepository file:$(pwd)/${CURRENTBUILD} \
  -source $(pwd)/${CURRENTBUILD} \
  -compress

# Print p2.index files...
p2Index=<<EOF
version = 1
metadata.repository.factory.order = compositeContent.xml,\!
artifact.repository.factory.order = compositeArtifacts.xml,\!
EOF
# ... in the current repository
echo $p2Index > $(pwd)/${CURRENTBUILD}/p2.index
# ... in the top level composite repository
echo $p2Index > ./p2.index

# Create a tempoary file defining the category we will publish
pushd ${CURRENTBUILD} > /dev/null
CATEGORY=$ORCCID.category.$BUILDTYPE
TMPFILE=$(mktemp)
cat > $TMPFILE <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<site>
   <category-def name="$CATEGORY" label="${REPONAME}"/>
   <feature url="$(ls features/${ORCCID}*)" id="${ORCCID}" version="${VERSION}">
      <category name="$CATEGORY"/>
   </feature>
</site>
EOF
popd > /dev/null

# Publish category for the current build
echo ""
echo "-> Register $CURRENTBUILD into category ${REPONAME}"
$P2ADMIN -application org.eclipse.equinox.p2.publisher.CategoryPublisher \
   -metadataRepository file:$(pwd)/${CURRENTBUILD} \
   -categoryDefinition file:$TMPFILE \
   -categoryQualifier -compress

# Delete oldest builds before creating the composite repo
echo ""
echo "-> Delete useless builds (builds oldest than ${NDAYSTOKEEP}*24 hours)"
find -name "${ORCCID}_*" -mtime +${NDAYSTOKEEP} -delete -print

echo ""
echo "-> Create p2 composite repository (top level, references all sub-repositories)"
$P2ADMIN -application org.eclipselabs.equinox.p2.composite.repository \
  -location file:$(pwd) \
  -add $(echo ${ORCCID}_* | sed -e "s/ /,/g") \
  -repositoryName $REPONAME \
  -compressed

popd > /dev/null

echo ""
echo "****************************************************************"
echo "*       Installs Orcc plugins into eclipse runtime             *"
echo "****************************************************************"
echo ""
echo "Uninstall old Orcc feature"

$ECLIPSEBUILD/eclipse   -nosplash -consoleLog \
                        -application org.eclipse.equinox.p2.director \
                        -destination $ECLIPSERUN \
                        -uninstallIU ${ORCCID}.feature.group \
|| echo -e "\n*** There is no existing Orcc feature to uninstall. This is probably the first time this script is \n\
launched since last eclipse reinstall. Please ignore the previous error message. ***"

echo "Install new Orcc feature"
$ECLIPSEBUILD/eclipse   -nosplash -consoleLog \
                        -application org.eclipse.equinox.p2.director \
                        -destination $ECLIPSERUN \
                        -artifactRepository file:$LOCALREPO \
                        -metadataRepository file:$LOCALREPO \
                        -repository $ECLIPSEREPOSITORY \
                        -installIU ${ORCCID}.feature.group

echo "***END*** $0 $(date -R)"
