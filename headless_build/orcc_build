#!/bin/bash

NBARGS=3
function print_usage() {
    echo
    echo "Usage: $0 <working_directory> <feature_dir> <plugin_dir> [<plugin_dir>, <plugin_dir>, ...]"
    echo "    <working_directory>           Path to folder used to perform build & tests"
    echo "    <feature_dir>                 Path to eclipse feature folder"
    echo "    <plugin_dir>                  Path(s) to folder(s) containing eclipse plugins directories"
}

source $(dirname $0)/defines.sh

if [ $# -lt $NBARGS ]; then
    print_usage
    exit $E_BADARGS
fi

[ ! -d "$2" ] && echo "Missing features directory" && print_usage && exit $E_BADARGS
[ ! -d "$3" ] && echo "Missing plugins directory" && print_usage && exit $E_BADARGS

SOURCEFEATUREDIR=$2

echo "***START*** $(date -R) Build type: $BUILDTYPE"
rm -fr $BUILDDIR
mkdir -p $PLUGINSDIR
mkdir -p $FEATURESDIR/net.sf.orcc

cp -ur $SOURCEFEATUREDIR/* $FEATURESDIR/net.sf.orcc

# Remove the 2 first arg from command line
shift 2
# Loop over resulting cli arguments
for arg; do
    cp -ur $arg/* $PLUGINSDIR
done

echo ""
echo "****************************************************************"
echo "*             Generates Cal Xtext architecture                 *"
echo "****************************************************************"
echo ""
cd $PLUGINSDIR/net.sf.orcc.cal
java -cp $MWECP org.eclipse.emf.mwe2.launch.runtime.Mwe2Launcher src/net/sf/orcc/cal/GenerateCal.mwe2

echo ""
echo "****************************************************************"
echo "*             Generates Java sources from Xtend                *"
echo "****************************************************************"
echo ""
already_compiled=""
for plugin in $(ls $PLUGINSDIR); do
    # Execute Xtend compile only if plugin contains *.xtend files
    if [ -n "$(find $PLUGINSDIR/$plugin -name "*.xtend" -print0)" ]; then
        echo "==> Plugin: $PLUGINSDIR/$plugin"
        # Yes, I know, -cp parameter is set twice with the same value. Don't ask me
        # why... Removing one of these parameters will break the Xtend generation step...
        java -cp $XTENDCP org.eclipse.xtend.core.compiler.batch.Main \
             -cp $XTENDCP \
             -d $PLUGINSDIR/$plugin/xtend-gen \
             $already_compiled$PLUGINSDIR/$plugin/src

        # Last plugins compiled needs to have the base class already compiled in
        # the list of source folder. Note that works fine only because we are lucky:
        # alphabetical order of Orcc plugins is coherent with dependency order in Xtend files.
        if [ -d $PLUGINSDIR/$plugin/xtend-gen ]; then
            already_compiled=$PLUGINSDIR/$plugin/xtend-gen:$already_compiled
        fi
        printf "\n"
    fi
done

echo ""
echo "****************************************************************"
echo "*                    Launches PDE Build                        *"
echo "****************************************************************"
echo ""

# Define PDE build specific variables
LAUNCHERJAR=$(echo $ECLIPSEBUILD/plugins/org.eclipse.equinox.launcher_*.jar)
BUILDFILE=$(echo $ECLIPSEBUILD/plugins/org.eclipse.pde.build_*)/scripts/build.xml
CONFIGDIR=$(dirname $0)/pdeconfig
KEEPONLYLATESTVERSIONS=true # Set to false when a Release build will be defined
LOCALREPO=$ORCCWORK/repository.$BUILDTYPE

if [ "$BUILDTYPE" == "tests" ]
then
    PDEBUILDTYPE=I
elif [ "$BUILDTYPE" == "nightly" ]
then
    PDEBUILDTYPE=N
else
    PDEBUILDTYPE=R
fi

mkdir -p $LOCALREPO
mkdir -p $BUILDDIR

$ECLIPSEBUILD/eclipse   -nosplash -consoleLog \
                        -application org.eclipse.ant.core.antRunner \
                        -buildfile $BUILDFILE \
                        -Dbuilder=$CONFIGDIR \
                        -DbaseLocation=$ECLIPSEBUILD \
                        -DpluginPath=$ECLIPSEBUILD:$BUILDDIR \
                        -DbuildType=$PDEBUILDTYPE \
                        -DtopLevelElementId=net.sf.orcc \
                        -DbuildDirectory=$BUILDDIR \
                        -Dbase=$BUILDDIR \
                        -Dp2.mirror.slicing.latestVersionOnly=$KEEPONLYLATESTVERSIONS \
                        -Dp2.build.repo=file:$LOCALREPO

echo ""
echo "****************************************************************"
echo "*       Installs Orcc plugins into eclipse runtime             *"
echo "****************************************************************"
echo ""
echo "Uninstall old Orcc feature"

$ECLIPSEBUILD/eclipse   -nosplash -consoleLog \
                        -application org.eclipse.equinox.p2.director \
                        -destination $ECLIPSERUN \
                        -uninstallIU net.sf.orcc.feature.group \
|| echo -e "\n*** There is no existing Orcc feature to uninstall. This is probably the first time this script is \n\
launched since last eclipse reinstall. Please ignore the previous error message. ***"

echo "Install new Orcc feature"
$ECLIPSEBUILD/eclipse   -nosplash -consoleLog \
                        -application org.eclipse.equinox.p2.director \
                        -destination $ECLIPSERUN \
                        -artifactRepository file:$LOCALREPO \
                        -metadataRepository file:$LOCALREPO \
                        -repository $ECLIPSEREPOSITORY \
                        -installIU net.sf.orcc.feature.group

echo "***END*** $0 $(date -R)"
